1.List all patients along with their corresponding doctors and visit dates.
SELECT p.name AS patient_name, d.name AS doctor_name, v.visit_date
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
JOIN doctors d ON v.doctor_id = d.doctor_id
ORDER BY v.visit_date;

2. Find all visits made by patients over the age of 60.
SELECT p.name AS patient_name, v.visit_date, v.diagnosis
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
WHERE p.age > 60
ORDER BY v.visit_date DESC;

3. Retrieve the names of all doctors who specialize in 'Cardiology'.
SELECT name
FROM doctors
WHERE specialization = 'Cardiology';


4. List the names and addresses of all female patients.
SELECT name, address
FROM patients
WHERE gender = 'F';


5. Find the total number of visits made to the hospital.
SELECT COUNT(*) AS total_visits
FROM visits;

6. Retrieve the names of patients who visited on '2024-08-12'.
SELECT p.name
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
WHERE v.visit_date = '2024-08-12';

7. Find the number of patients each doctor has seen.
SELECT d.name, COUNT(DISTINCT v.patient_id) AS patient_count
FROM doctors d
JOIN visits v ON d.doctor_id = v.doctor_id
GROUP BY d.name;

8. Retrieve all visits where the diagnosis was 'Hypertension'.
SELECT p.name AS patient_name, v.visit_date, v.treatment
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
WHERE v.diagnosis = 'Hypertension';


9. List the names of all patients who have been treated by 'Dr. Smith'.	
SELECT p.name
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
JOIN doctors d ON v.doctor_id = d.doctor_id
WHERE d.name = 'Dr. Smith';

10. Get the details of the most recent visit for each patient.
SELECT p.name AS patient_name, MAX(v.visit_date) AS last_visit_date
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
GROUP BY p.name;

1. List all visits and include the patient and doctor names along with the visit date and diagnosis.
SELECT p.name AS patient_name, d.name AS doctor_name, v.visit_date, v.diagnosis
FROM visits v
JOIN patients p ON v.patient_id = p.patient_id
JOIN doctors d ON v.doctor_id = d.doctor_id
ORDER BY v.visit_date;


2. Find the total number of doctors in the hospital.
SELECT COUNT(*) AS total_doctors
FROM doctors;


3. Retrieve the name of the doctor who has the least experience.
SELECT name
FROM doctors
ORDER BY experience_years ASC
LIMIT 1;

4. List all patients who have visited the hospital more than once.
SELECT p.name
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
GROUP BY p.name
HAVING COUNT(v.visit_id) > 1;

5. Find the names of patients who have visited 'Dr. Green'.
SELECT p.name
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
JOIN doctors d ON v.doctor_id = d.doctor_id
WHERE d.name = 'Dr. Green';

6. Retrieve the visit date and diagnosis for patients aged between 30 and 40.
SELECT p.name AS patient_name, v.visit_date, v.diagnosis
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
WHERE p.age BETWEEN 30 AND 40;

7. Find the doctor who has the most patients.
SELECT d.name, COUNT(DISTINCT v.patient_id) AS patient_count
FROM doctors d
JOIN visits v ON d.doctor_id = v.doctor_id
GROUP BY d.name
ORDER BY patient_count DESC
LIMIT 1;

8. List all diagnoses recorded in the visits table.
SELECT DISTINCT diagnosis
FROM visits;

9. Retrieve the names of doctors who have treated patients more than once.
SELECT d.name
FROM doctors d
JOIN visits v ON d.doctor_id = v.doctor_id
GROUP BY d.name
HAVING COUNT(DISTINCT v.patient_id) > 1;

10. Find all patients who have had a visit in the past 6 months.
SELECT DISTINCT p.name
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
WHERE v.visit_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);

Window Function Tasks:

1. Assign a unique rank to each visit based on the visit date for each patient.
SELECT p.name AS patient_name, v.visit_date, v.diagnosis,
       ROW_NUMBER() OVER (PARTITION BY p.patient_id ORDER BY v.visit_date) AS visit_rank
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
ORDER BY p.name, visit_rank;


2. Find the most recent visit for each patient along with the visit details and rank them by date.
WITH ranked_visits AS (
    SELECT p.name AS patient_name, v.visit_date, v.diagnosis,
           ROW_NUMBER() OVER (PARTITION BY p.patient_id ORDER BY v.visit_date DESC) AS visit_rank
    FROM patients p
    JOIN visits v ON p.patient_id = v.patient_id
)
SELECT patient_name, visit_date, diagnosis
FROM ranked_visits
WHERE visit_rank = 1;

3. List each patientâ€™s visits with the diagnosis from the previous visit (if any) using LAG.
SELECT p.name AS patient_name, v.visit_date, v.diagnosis,
       LAG(v.diagnosis, 1) OVER (PARTITION BY p.patient_id ORDER BY v.visit_date) AS previous_diagnosis
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
ORDER BY p.name, v.visit_date;


4. Calculate the time gap between consecutive visits for each patient using LEAD.
SELECT p.name AS patient_name, v.visit_date,
       LEAD(v.visit_date, 1) OVER (PARTITION BY p.patient_id ORDER BY v.visit_date) AS next_visit_date,
       DATEDIFF(LEAD(v.visit_date, 1) OVER (PARTITION BY p.patient_id ORDER BY v.visit_date), v.visit_date) AS days_between_visits
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
ORDER BY p.name, v.visit_date;

5. Rank doctors by the number of patients they have seen, using DENSE_RANK.
WITH doctor_patient_counts AS (
    SELECT d.name AS doctor_name, COUNT(DISTINCT v.patient_id) AS patient_count
    FROM doctors d
    JOIN visits v ON d.doctor_id = v.doctor_id
    GROUP BY d.name
)
SELECT doctor_name, patient_count,
       DENSE_RANK() OVER (ORDER BY patient_count DESC) AS rank
FROM doctor_patient_counts;

Subquery and Correlated Subquery Tasks:
1. Find all patients who have had more visits than the average number of visits per patient.
SELECT p.name
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
GROUP BY p.name
HAVING COUNT(v.visit_id) > (
    SELECT AVG(visit_count)
    FROM (
        SELECT COUNT(visit_id) AS visit_count
        FROM visits
        GROUP BY patient_id
    ) subquery
);

2. List all doctors who have seen patients with at least one diagnosis of 'Hypertension'.
SELECT d.name
FROM doctors d
WHERE EXISTS (
    SELECT 1
    FROM visits v
    JOIN patients p ON v.patient_id = p.patient_id
    WHERE v.doctor_id = d.doctor_id
      AND v.diagnosis = 'Hypertension'
);


Pivot and Unpivot Tasks:
1. Pivot: Show the number of visits per patient for each month of the year.
-- Assuming visit_date is stored in YYYY-MM-DD format
SELECT patient_name,
       ISNULL([01], 0) AS Jan,
       ISNULL([02], 0) AS Feb,
       ISNULL([03], 0) AS Mar,
       ISNULL([04], 0) AS Apr,
       ISNULL([05], 0) AS May,
       ISNULL([06], 0) AS Jun,
       ISNULL([07], 0) AS Jul,
       ISNULL([08], 0) AS Aug,
       ISNULL([09], 0) AS Sep,
       ISNULL([10], 0) AS Oct,
       ISNULL([11], 0) AS Nov,
       ISNULL([12], 0) AS Dec
FROM (
    SELECT p.name AS patient_name, 
           MONTH(v.visit_date) AS visit_month
    FROM patients p
    JOIN visits v ON p.patient_id = v.patient_id
) AS source_table
PIVOT (
    COUNT(visit_month)
    FOR visit_month IN ([01], [02], [03], [04], [05], [06], [07], [08], [09], [10], [11], [12])
) AS pivot_table;

2. Unpivot: Transform the monthly visit count columns into rows.
-- Assuming the pivot table from the previous query is available as pivot_table
SELECT patient_name,
       visit_month,
       visit_count
FROM (
    SELECT patient_name,
           ISNULL([01], 0) AS Jan,
           ISNULL([02], 0) AS Feb,
           ISNULL([03], 0) AS Mar,
           ISNULL([04], 0) AS Apr,
           ISNULL([05], 0) AS May,
           ISNULL([06], 0) AS Jun,
           ISNULL([07], 0) AS Jul,
           ISNULL([08], 0) AS Aug,
           ISNULL([09], 0) AS Sep,
           ISNULL([10], 0) AS Oct,
           ISNULL([11], 0) AS Nov,
           ISNULL([12], 0) AS Dec
    FROM pivot_table
) AS pivot_source
UNPIVOT (
    visit_count FOR visit_month IN (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)
) AS unpivot_table;







1.Retrieve all patients who have visited more than 3 doctors.
SELECT p.patient_id, p.name, COUNT(DISTINCT v.doctor_id) AS doctor_count
FROM patients p
JOIN visits v ON p.patient_id = v.patient_id
GROUP BY p.patient_id, p.name
HAVING COUNT(DISTINCT v.doctor_id) > 3;

2.Find the most common diagnosis made by each doctor.
	
SELECT d.doctor_id, d.name, v.diagnosis, COUNT(v.diagnosis) AS diagnosis_count
FROM doctors d
JOIN visits v ON d.doctor_id = v.doctor_id
GROUP BY d.doctor_id, d.name, v.diagnosis
HAVING COUNT(v.diagnosis) = (
    SELECT MAX(sub.diagnosis_count)
    FROM (
        SELECT COUNT(v2.diagnosis) AS diagnosis_count
        FROM visits v2
        WHERE v2.doctor_id = d.doctor_id
        GROUP BY v2.diagnosis
    ) sub
);

3. List patients who have not visited the hospital in the last year.
SELECT p.patient_id, p.name, MAX(v.visit_date) AS last_visit_date
FROM patients p
LEFT JOIN visits v ON p.patient_id = v.patient_id
GROUP BY p.patient_id, p.name
HAVING MAX(v.visit_date) < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) OR MAX(v.visit_date) IS NULL;

4.Calculate the average number of visits per patient.
SELECT AVG(visit_count) AS avg_visits_per_patient
FROM (
    SELECT COUNT(v.visit_id) AS visit_count
    FROM patients p
    JOIN visits v ON p.patient_id = v.patient_id
    GROUP BY p.patient_id
) subquery;

5. Identify doctors who have seen the most patients.
SELECT d.doctor_id, d.name, COUNT(DISTINCT v.patient_id) AS patient_count
FROM doctors d
JOIN visits v ON d.doctor_id = v.doctor_id
GROUP BY d.doctor_id, d.name
ORDER BY patient_count DESC
LIMIT 1;



